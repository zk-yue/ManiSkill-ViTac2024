2024-03-12 00:17:39,499 INFO    MainThread:34761 [wandb_setup.py:_flush():76] Current SDK version is 0.16.0
2024-03-12 00:17:39,499 INFO    MainThread:34761 [wandb_setup.py:_flush():76] Configure stats pid to 34761
2024-03-12 00:17:39,500 INFO    MainThread:34761 [wandb_setup.py:_flush():76] Loading settings from /home/yuezk/.config/wandb/settings
2024-03-12 00:17:39,500 INFO    MainThread:34761 [wandb_setup.py:_flush():76] Loading settings from /home/yuezk/yzk/ViTac/ManiSkill-ViTac2024/wandb/settings
2024-03-12 00:17:39,500 INFO    MainThread:34761 [wandb_setup.py:_flush():76] Loading settings from environment variables: {}
2024-03-12 00:17:39,500 INFO    MainThread:34761 [wandb_setup.py:_flush():76] Applying setup settings: {'_disable_service': False}
2024-03-12 00:17:39,500 INFO    MainThread:34761 [wandb_setup.py:_flush():76] Inferring run settings from compute environment: {'program_relpath': 'scripts/universal_training_script.py', 'program_abspath': '/home/yuezk/yzk/ViTac/ManiSkill-ViTac2024/scripts/universal_training_script.py', 'program': '/home/yuezk/yzk/ViTac/ManiSkill-ViTac2024/scripts/universal_training_script.py'}
2024-03-12 00:17:39,500 INFO    MainThread:34761 [wandb_init.py:_log_setup():524] Logging user logs to /home/yuezk/yzk/ViTac/ManiSkill-ViTac2024/wandb/run-20240312_001739-7tmguek5/logs/debug.log
2024-03-12 00:17:39,500 INFO    MainThread:34761 [wandb_init.py:_log_setup():525] Logging internal logs to /home/yuezk/yzk/ViTac/ManiSkill-ViTac2024/wandb/run-20240312_001739-7tmguek5/logs/debug-internal.log
2024-03-12 00:17:39,500 INFO    MainThread:34761 [wandb_init.py:init():564] calling init triggers
2024-03-12 00:17:39,500 INFO    MainThread:34761 [wandb_init.py:init():571] wandb.init called with sweep_config: {}
config: {'env': {'max_action': array([4., 2., 2.]), 'step_penalty': 1, 'final_reward': 10, 'max_steps': 100, 'sensor_offset_x_range_len': 2.0, 'sensor_offset_z_range_len': 2.0, 'key_x_max_offset': 10, 'key_y_max_offset': 0, 'key_z_max_offset': 0, 'normalize': False, 'marker_random_noise': 0.5, 'marker_lose_tracking_probability': 0.01, 'marker_interval_range': [1.95, 2.15], 'marker_rotation_range': 0.1, 'marker_translation_range': [1, 1], 'marker_pos_shift_range': [0.1, 0.1]}, 'policy': {'buffer_size': 200000, 'train_freq': 2, 'gradient_steps': -1, 'learning_starts': 2000, 'target_policy_noise': 0.5, 'target_noise_clip': 1, 'action_noise': VecNoise(BaseNoise=NormalActionNoise(mu=[0 0 0], sigma=[0.5 0.5 0.5])), n_envs=1), 'batch_size': 128, 'learning_rate': 0.0003, 'policy_delay': 2, 'policy_kwargs': {'net_arch': {'pi': [256, 256], 'qf': [256, 256]}, 'pointnet_in_dim': 4, 'pointnet_out_dim': 32, 'pointnet_batchnorm': False, 'pointnet_layernorm': True, 'zero_init_output': True, 'use_relative_motion': True}, 'device': 'cuda:0', 'seed': 0, 'tensorboard_log': '/home/yuezk/yzk/ViTac/ManiSkill-ViTac2024/scripts/../training_log/long_open_lock_2024-03-12_00-17-31.474'}, 'train': {'algorithm_name': 'TD3', 'total_timesteps': 100000, 'log_interval': 10, 'checkpoint_every': 2000, 'eval_freq': 2000, 'n_eval': 50, 'parallel': 1, 'seed': 0, 'device': 'cuda:0', 'gpu': 0, 'name': 'long_open_lock', 'wandb_name': 'ManiSkill_ViTac', 'emp': {}}, 'cfg': 'configs/parameters/long_open_lock.yaml', 'no_render': False}
2024-03-12 00:17:39,500 INFO    MainThread:34761 [wandb_init.py:init():614] starting backend
2024-03-12 00:17:39,500 INFO    MainThread:34761 [wandb_init.py:init():618] setting up manager
2024-03-12 00:17:39,502 INFO    MainThread:34761 [backend.py:_multiprocessing_setup():105] multiprocessing start_methods=fork,spawn,forkserver, using: spawn
2024-03-12 00:17:39,503 INFO    MainThread:34761 [wandb_init.py:init():624] backend started and connected
2024-03-12 00:17:39,505 INFO    MainThread:34761 [wandb_init.py:init():716] updated telemetry
2024-03-12 00:17:39,508 INFO    MainThread:34761 [wandb_init.py:init():749] communicating run to backend with 90.0 second timeout
2024-03-12 00:17:41,386 INFO    MainThread:34761 [wandb_run.py:_on_init():2254] communicating current version
2024-03-12 00:17:42,599 INFO    MainThread:34761 [wandb_run.py:_on_init():2263] got version response upgrade_message: "wandb version 0.16.4 is available!  To upgrade, please run:\n $ pip install wandb --upgrade"

2024-03-12 00:17:42,599 INFO    MainThread:34761 [wandb_init.py:init():800] starting run threads in backend
2024-03-12 00:17:46,405 INFO    MainThread:34761 [wandb_run.py:_console_start():2233] atexit reg
2024-03-12 00:17:46,405 INFO    MainThread:34761 [wandb_run.py:_redirect():2088] redirect: wrap_raw
2024-03-12 00:17:46,405 INFO    MainThread:34761 [wandb_run.py:_redirect():2153] Wrapping output streams.
2024-03-12 00:17:46,405 INFO    MainThread:34761 [wandb_run.py:_redirect():2178] Redirects installed.
2024-03-12 00:17:46,406 INFO    MainThread:34761 [wandb_init.py:init():841] run started, returning control to user process
2024-03-12 00:17:47,930 INFO    MainThread:34761 [wandb_run.py:_tensorboard_callback():1498] tensorboard callback: /home/yuezk/yzk/ViTac/ManiSkill-ViTac2024/scripts/../training_log/long_open_lock_2024-03-12_00-17-31.474/TD3_1, True
2024-03-12 00:17:47,933 INFO    MainThread:34761 [wandb_run.py:_config_callback():1342] config_cb None None {'algo': 'TD3', 'policy_class': "<class 'solutions.policies.TD3PolicyForLongOpenLockPointFlowEnv'>", 'device': 'cuda:0', 'verbose': 1, 'policy_kwargs': "{'net_arch': {'pi': [256, 256], 'qf': [256, 256]}, 'pointnet_in_dim': 4, 'pointnet_out_dim': 32, 'pointnet_batchnorm': False, 'pointnet_layernorm': True, 'zero_init_output': True, 'use_relative_motion': True}", 'num_timesteps': 0, '_total_timesteps': 100000, '_num_timesteps_at_start': 0, 'seed': 0, 'action_noise': 'VecNoise(BaseNoise=NormalActionNoise(mu=[0 0 0], sigma=[0.5 0.5 0.5])), n_envs=1)', 'start_time': 1710173866406248939, 'learning_rate': 0.0003, 'tensorboard_log': '/home/yuezk/yzk/ViTac/ManiSkill-ViTac2024/scripts/../training_log/long_open_lock_2024-03-12_00-17-31.474', '_last_obs': "OrderedDict([('key1', array([[ 8.052606e+00, -3.160024e-03, -2.025721e-01]], dtype=float32)), ('key2', array([[ 8.0524292e+00, -3.4841709e-03, -2.0362227e-01]], dtype=float32)), ('key_side_pts', array([[[ 0.05326423, -0.00300482,  0.02097605],\n        [ 0.05326375,  0.00298445,  0.02098195],\n        [ 0.05326692, -0.00299506,  0.01097473],\n        [ 0.05326644,  0.00299421,  0.01098064]]], dtype=float32)), ('lock1_pts', array([[[ 0.035,  0.004,  0.03 ],\n        [ 0.035, -0.004,  0.03 ],\n        [ 0.045,  0.004,  0.03 ],\n        [ 0.045, -0.004,  0.03 ]]], dtype=float32)), ('lock2_pts', array([[[ 0.015, -0.004,  0.03 ],\n        [ 0.015,  0.004,  0.03 ],\n        [ 0.025,  0.004,  0.03 ],\n        [ 0.025, -0.004,  0.03 ]]], dtype=float32)), ('lock_side_pts', array([[[ 0.052,  0.02 ,  0.04 ],\n        [ 0.052, -0.02 ,  0.04 ],\n        [ 0.052, -0.02 ,  0.   ],\n        [ 0.052,  0.02 ,  0.   ]]], dtype=float32)), ('marker_flow', array([[[[[ 35.24512 ,  15.085151],\n          [ 66.80242 ,  12.158628],\n          [102.04325 ,  10.606727],\n          ...,\n          [309.26843 , 208.89813 ],\n          [309.26843 , 208.89813 ],\n          [309.26843 , 208.89813 ]],\n\n         [[ 35.053047,  13.743678],\n          [ 65.75351 ,  12.536385],\n          [101.41246 ,  11.175115],\n          ...,\n          [309.5606  , 208.28506 ],\n          [309.5606  , 208.28506 ],\n          [309.5606  , 208.28506 ]]],\n\n\n        [[[ 33.487217,  22.595121],\n          [ 68.60346 ,  21.582956],\n          [ 99.86753 ,  21.87997 ],\n          ...,\n          [302.7183  , 213.20157 ],\n          [302.7183  , 213.20157 ],\n          [302.7183  , 213.20157 ]],\n\n         [[ 34.446823,  23.025978],\n          [ 68.79479 ,  21.152632],\n          [ 99.92335 ,  22.624287],\n          ...,\n          [302.1395  , 213.6961  ],\n          [302.1395  , 213.6961  ],\n          [302.1395  , 213.6961  ]]]]], dtype=float32)), ('relative_motion', array([[0., 0., 0.]], dtype=float32))])", '_last_episode_starts': '[ True]', '_last_original_obs': 'None', '_episode_num': 0, 'use_sde': 'False', 'sde_sample_freq': -1, '_current_progress_remaining': 1.0, '_stats_window_size': 100, 'ep_info_buffer': 'deque([], maxlen=100)', 'ep_success_buffer': 'deque([], maxlen=100)', '_n_updates': 0, '_custom_logger': 'False', '_vec_normalize_env': 'None', 'observation_space': "Dict('key1': Box(-3.4028235e+38, 3.4028235e+38, (3,), float32), 'key2': Box(-3.4028235e+38, 3.4028235e+38, (3,), float32), 'key_side_pts': Box(-3.4028235e+38, 3.4028235e+38, (4, 3), float32), 'lock1_pts': Box(-3.4028235e+38, 3.4028235e+38, (4, 3), float32), 'lock2_pts': Box(-3.4028235e+38, 3.4028235e+38, (4, 3), float32), 'lock_side_pts': Box(-3.4028235e+38, 3.4028235e+38, (4, 3), float32), 'marker_flow': Box(-3.4028235e+38, 3.4028235e+38, (2, 2, 128, 2), float32), 'relative_motion': Box(-3.4028235e+38, 3.4028235e+38, (3,), float32))", 'action_space': 'Box(-1.0, 1.0, (3,), float32)', 'n_envs': 1, 'buffer_size': 200000, 'batch_size': 128, 'learning_starts': 2000, 'tau': 0.005, 'gamma': 0.99, 'gradient_steps': -1, 'optimize_memory_usage': 'False', 'replay_buffer': '<stable_baselines3.common.buffers.DictReplayBuffer object at 0x7f34a7ae4670>', 'replay_buffer_class': "<class 'stable_baselines3.common.buffers.DictReplayBuffer'>", 'replay_buffer_kwargs': '{}', '_episode_storage': 'None', 'train_freq': "TrainFreq(frequency=2, unit=<TrainFrequencyUnit.STEP: 'step'>)", 'use_sde_at_warmup': 'False', 'policy_delay': 2, 'target_noise_clip': 1, 'target_policy_noise': 0.5, 'lr_schedule': '<function constant_fn.<locals>.func at 0x7f34d19457e0>', 'actor': 'LongOpenLockPointNetActor(\n  (features_extractor): FlattenExtractor(\n    (flatten): Flatten(start_dim=1, end_dim=-1)\n  )\n  (mu): Sequential(\n    (0): Linear(in_features=1081, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=256, out_features=256, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=256, out_features=3, bias=True)\n    (5): Tanh()\n  )\n  (point_net_feature_extractor): PointNetFeatureExtractor(\n    (pointnet_local_fea): Sequential(\n      (0): Conv1d(4, 64, kernel_size=(1,), stride=(1,))\n      (1): Identity()\n      (2): ReLU()\n      (3): Conv1d(64, 64, kernel_size=(1,), stride=(1,))\n      (4): Identity()\n      (5): ReLU()\n    )\n    (pointnet_global_fea): PointNetFeaNew(\n      (conv0): Conv1d(64, 64, kernel_size=(1,), stride=(1,))\n      (bn0): Identity()\n      (conv1): Conv1d(64, 128, kernel_size=(1,), stride=(1,))\n      (bn1): Identity()\n      (conv2): Conv1d(128, 512, kernel_size=(1,), stride=(1,))\n      (bn2): Identity()\n    )\n    (mlp_output): Sequential(\n      (0): Linear(in_features=512, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Linear(in_features=256, out_features=256, bias=True)\n      (3): ReLU()\n      (4): Linear(in_features=256, out_features=32, bias=True)\n    )\n  )\n  (mlp_policy): Sequential(\n    (0): Linear(in_features=67, out_features=256, bias=True)\n    (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n    (2): ReLU()\n    (3): Linear(in_features=256, out_features=256, bias=True)\n    (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n    (5): ReLU()\n    (6): Linear(in_features=256, out_features=3, bias=True)\n    (7): Tanh()\n  )\n)', 'actor_target': 'LongOpenLockPointNetActor(\n  (features_extractor): FlattenExtractor(\n    (flatten): Flatten(start_dim=1, end_dim=-1)\n  )\n  (mu): Sequential(\n    (0): Linear(in_features=1081, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=256, out_features=256, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=256, out_features=3, bias=True)\n    (5): Tanh()\n  )\n  (point_net_feature_extractor): PointNetFeatureExtractor(\n    (pointnet_local_fea): Sequential(\n      (0): Conv1d(4, 64, kernel_size=(1,), stride=(1,))\n      (1): Identity()\n      (2): ReLU()\n      (3): Conv1d(64, 64, kernel_size=(1,), stride=(1,))\n      (4): Identity()\n      (5): ReLU()\n    )\n    (pointnet_global_fea): PointNetFeaNew(\n      (conv0): Conv1d(64, 64, kernel_size=(1,), stride=(1,))\n      (bn0): Identity()\n      (conv1): Conv1d(64, 128, kernel_size=(1,), stride=(1,))\n      (bn1): Identity()\n      (conv2): Conv1d(128, 512, kernel_size=(1,), stride=(1,))\n      (bn2): Identity()\n    )\n    (mlp_output): Sequential(\n      (0): Linear(in_features=512, out_features=256, bias=True)\n      (1): ReLU()\n      (2): Linear(in_features=256, out_features=256, bias=True)\n      (3): ReLU()\n      (4): Linear(in_features=256, out_features=32, bias=True)\n    )\n  )\n  (mlp_policy): Sequential(\n    (0): Linear(in_features=67, out_features=256, bias=True)\n    (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n    (2): ReLU()\n    (3): Linear(in_features=256, out_features=256, bias=True)\n    (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n    (5): ReLU()\n    (6): Linear(in_features=256, out_features=3, bias=True)\n    (7): Tanh()\n  )\n)', 'critic': 'CustomCritic(\n  (features_extractor): CriticFeatureExtractorForLongOpenLock()\n  (qf0): Sequential(\n    (0): Linear(in_features=9, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=256, out_features=256, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=256, out_features=1, bias=True)\n  )\n  (qf1): Sequential(\n    (0): Linear(in_features=9, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=256, out_features=256, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=256, out_features=1, bias=True)\n  )\n)', 'critic_target': 'CustomCritic(\n  (features_extractor): CriticFeatureExtractorForLongOpenLock()\n  (qf0): Sequential(\n    (0): Linear(in_features=9, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=256, out_features=256, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=256, out_features=1, bias=True)\n  )\n  (qf1): Sequential(\n    (0): Linear(in_features=9, out_features=256, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=256, out_features=256, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=256, out_features=1, bias=True)\n  )\n)', 'actor_batch_norm_stats': '[]', 'critic_batch_norm_stats': '[]', 'actor_batch_norm_stats_target': '[]', 'critic_batch_norm_stats_target': '[]', '_logger': '<stable_baselines3.common.logger.Logger object at 0x7f34a40c61a0>'}
